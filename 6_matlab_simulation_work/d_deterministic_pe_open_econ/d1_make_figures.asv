clear all; close all; clc;
addpath(genpath('../b_helper_functions'));
addpath(genpath('d_helper_functions'))
addpath(genpath('d_output'))
dbstop if error

%% Solve an initial GE 
params = dh0_set_invariant_params();
y = 12;
P0 = 1.25;
output = dh1_find_symmetric_ss(params, P0,12); ss = output.graph_output(end,:); graph_output = output.graph_output;
%fprintf('ss certainty levels: (%g, %g)\nss profits: (%g,%g)\nss data labor: (%g,%g)\n', ss(4:5), ss(7:8), ss(11:12))
%fprintf('time to enter market 2: %g\n', output.market_2_entrance_t)
save('../../../3) output/simulation_output/raw/1_base_ss_progression.mat','graph_output')
params.sym_num_firms = .8630;
pe_params = params; pe_params.y = [y,y]; pe_params.P = output.P;

%% 2) plot the ss spend levels of different phi_g
doing_anal_2 = false;
if doing_anal_2
    grid_points = 100; phi_g_vec = linspace(.9*params.phi_g, 1.1*params.phi_g,grid_points)';
    results_mat = [phi_g_vec, zeros(grid_points,2)]; l_output = output;
    parfor i =1:length(results_mat)
        disp(i)
        l_params = pe_params;
        l_params.phi_g = phi_g_vec(i);
        l_output = dh10_LCP_inner_loop(output.v, l_params, true);
        results_mat(i,2:3) = l_output.graph_output(end, 11:12);
    end
    save('../../../3) output/simulation_output/raw/2_phi_g_x_data.mat','results_mat')
end

%% 3) Plot progression to ss at three different phi_d values 
doing_anal_3 = false; 
if doing_anal_3
scales = [ 0.9, 1, 1.1]; results_mat = [];
for s = scales
    l_params = pe_params; l_params.phi_d = s * pe_params.phi_d;
    out = dh10_LCP_inner_loop(output.v, l_params, true); g_out = out.graph_output;
    results_mat = [results_mat; l_params.phi_d * ones(length(g_out), 1), g_out(:, 9:10)];
end
end

%% A
doing_asym_stuff = true;
if doing_asym_stuff
    y = [y,.95*y];
    P0 = output.P;
    grid_length = .005; num_breaks = 5; cutoff = 5e-3;
    [dual_output, num_firms, P] = dh2_find_asymmetric_ss(y, P0, grid_length, num_breaks,cutoff, params);

    grid_points = 100; phi_g_vec = linspace(.9*params.phi_g, 1.1*params.phi_g,grid_points)';
    results_mat = [phi_g_vec, zeros(grid_points,2)]; l_output = output;



end
