function dv_final = dh6_upwind(dv_b, dv_f, params)

fields = fieldnames(params); % Get the field names of the structure
for idx = 1:length(fields); eval([fields{idx} ' = params.' fields{idx} ';']); end

%=== setup ===  
dv_min_base = min(dv_b,dv_f); dv_max_base =  max(dv_b,dv_f);
%=== make initial fwd/bkwd assignments by iteratively checking best / worst case scenarios===  
Ib = false(size(dv_b)); If = Ib; I_final = Ib;
for i = 1:num_state_vars
    % dv_max is worst case scenario for negative Sigma_dot
    dv_max = dv_max_base; dv_max(Ib) = dv_b(Ib); dv_max(If) = dv_f(If);
    optim_max = dh5_optim_calc(dv_max, params);
    Ib = optim_max.drift <= 0;

    %dv_min is worse case scenario for postive Sigma_dot
    dv_min = dv_min_base; dv_min(Ib) = dv_b(Ib); dv_min(If) = dv_f(If);
    optim_min = dh5_optim_calc(dv_min,params);
    If = optim_min.drift > 0;

    if  isequal(I_final, Ib | If) || all(Ib(:) | If(:))
        I_final = (Ib | If);
        break
    else
        I_final = (Ib | If);
    end
end
dv_final = zeros(size(dv_b)); dv_final(Ib) = dv_b(Ib); dv_final(If) = dv_f(If);


rows_with_ambiguity = find(any(~I_final, 2));
unique_keys = unique(I_final(rows_with_ambiguity, :), 'rows');
dv_2_final = dv_final;
for key_index = 1:size(unique_keys,1)
    key = unique_keys(key_index,:); unknown_cols = find(~key);
    k = numel(unknown_cols); num_combos = 2^k;
    key_rows = find(all(I_final == key,2));

   % Build combo derivatives
    combos = repelem(logical(dec2bin(0:num_combos-1) - '0'),length(key_rows),1);
    combo_mat = zeros(size(combos,1), num_state_vars);
    combo_mat(:,unknown_cols) = combos;
    dv_b_key = dv_b(key_rows, :); dv_b_key(:,~unknown_cols) = dv_final(key_rows, ~unknown_cols);
    dv_f_key = dv_f(key_rows, :); dv_f_key(:,~unknown_cols) = dv_final(key_rows, ~unknown_cols);
    dv_combos = repmat(dv_b_key,num_combos,1) + repmat(dv_f_key - dv_b_key, num_combos, 1).*combo_mat;
    
    
    l_params = params;
    l_params.Sigma_mat = repmat(params.Sigma_mat(:, :, key_rows), 1, 1, num_combos);
    l_params.E_x = repmat(params.E_x(key_rows, :), num_combos,1);
    l_params.E_pi = repmat(params.E_pi(key_rows, :), num_combos,1);
    l_params.xi = repmat(params.xi(key_rows, :), num_combos,1);


    optim = dh5_optim_calc(dv_combos, l_params);
    g = repmat((1:length(key_rows))', num_combos,1);
    [~, max_idx] = splitapply(@(v) max(v), optim.ham, g);
    row_indices = (max_idx-1)*length(key_rows) + (1:length(key_rows))';
    dv_2_final(key_rows,:) = dv_combos(row_indices, :);
end
if ~isempty(rows_with_ambiguity)
param_blocks = struct('Sigma_mat', [], 'E_x', [], 'E_pi', [], 'xi', []);
g = []; all_dv_combos = [];
for key_index = 1:size(unique_keys,1)
    key = unique_keys(key_index,:); unknown_cols = find(~key);
    k = numel(unknown_cols); num_combos = 2^k;
    key_rows = find(all(I_final == key,2));

   % Build combo derivatives
    combos = repelem(logical(dec2bin(0:num_combos-1) - '0'),length(key_rows),1);
    combo_mat = zeros(size(combos,1), num_state_vars);
    combo_mat(:,unknown_cols) = combos;
    dv_b_key = dv_b(key_rows, :); dv_b_key(:,~unknown_cols) = dv_final(key_rows, ~unknown_cols);
    dv_f_key = dv_f(key_rows, :); dv_f_key(:,~unknown_cols) = dv_final(key_rows, ~unknown_cols);
    dv_combos = repmat(dv_b_key,num_combos,1) + repmat(dv_f_key - dv_b_key, num_combos, 1).*combo_mat;
    all_dv_combos = [all_dv_combos;dv_combos];
    
    param_blocks.Sigma_mat = cat(3,param_blocks.Sigma_mat, repmat(params.Sigma_mat(:, :, key_rows), 1, 1, num_combos));
    param_blocks.E_x = [param_blocks.E_x; repmat(params.E_x(key_rows, :), num_combos,1)];
    param_blocks.E_pi = [param_blocks.E_pi; repmat(params.E_pi(key_rows, :), num_combos,1)];
    param_blocks.xi = [param_blocks.xi; repmat(params.xi(key_rows, :), num_combos,1)];
    if key_index == 1; max_g = 0; else max_g = max(g); end
  
    g = [g;repmat(((max_g+1):(max_g+length(key_rows)))', num_combos,1)];
end

l_params = params;
l_params.Sigma_mat = param_blocks.Sigma_mat;
l_params.E_x = param_blocks.E_x;
l_params.E_pi = param_blocks.E_pi;
l_params.xi = param_blocks.xi;

optim = dh5_optim_calc(all_dv_combos, l_params);
[~, max_idx] = splitapply(@(v) max(v), optim.ham, g);
for i = 1:length(rows_with_ambiguity)
    candidates = 
    dv_final(i,:) = 
end
row_indices = (max_idx-1)*length(rows_with_ambiguity) + (1:length(key_rows))';
dv_final(key_rows,:) = dv_combos(row_indices, :);
end